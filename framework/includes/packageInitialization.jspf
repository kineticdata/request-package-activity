<%--
    This file is responsible for initializing the package framework.  It loads
    the core bundleInitialization.jspf file (which is responsible for
    initializing the bundle framework), loads the core noCache.jspf file (which
    ensures that all of the package pages are not cached by the client or a
    proxy, loads the package configuration file, and loads any present helpers
    or models.

    This file will need to be modified if there are any helper or model classes
    that are added to the package.  Samples are included below.
--%>

<%-- 
    Initialize the bundle and load any necessary dependencies.
--%>
<%@include file="../../../../core/framework/includes/bundleInitialization.jspf"%>

<%-- 
    Ensure the response is not cached by client or proxy.
--%>
<%@include file="../../../../core/framework/includes/noCache.jspf"%>

<%-- 
    Include any helper files.  By convention, package specific logic (such as
    the building of URLs) should be included in a PackageHelper helper class.

    Format:
      <%@include file="../helpers/HELPER.jspf
    Example:
      <%@include file="../helpers/LanguageHelper.jspf
      <%@include file="../helpers/PackageHelper.jspf
--%>
<%@include file="../helpers/PackageHelper.jspf" %>
<%@include file="../helpers/ConfigurationHelper.jspf" %>
<%@include file="../helpers/ParameterConfig.jspf" %>
<%@include file="../helpers/SourceQuery.jspf" %>
<%@include file="../../../../common/framework/helpers/PathHelper.jspf" %>

<%--
    Include any model files.

    Format:
      <%@include file="../models/SYSTEM/MODEL.jspf
    Example:
      <%@include file="../models/kineticSample/Change.jspf
      <%@include file="../models/kineticSample/Incident.jspf
      <%@include file="../models/kineticSample/Person.jspf
--%>
<%@include file="../models/JsonBase.jspf" %>

<%--
    Instantiate any appropriate helper objects.  By convention, the
    PackageHelper class will typically be instantiated here.  The PackageHelper
    requires the current bundle object to be passed as a parameter (so that the
    package URL paths can be made relative to the current bundle/package without
    hard coding in the name of the bundle or package).
--%>
<% PackageHelper packageHelper = new PackageHelper(bundle); %>
<% PathHelper pathHelper = new PathHelper(bundle); %>
<%@include file="../helpers/SubmissionsHelper.jspf" %>

<%--
    Include the package configuration file.
--%>
<%@include file="../../config/config.jspf" %>

<%--
    Load the ParameterConfig object.
--%>
 <% ParameterConfig parameterConfig = new ParameterConfig(request, context, bundle); %>

<%--
    Use the configuration helper to load the JSON configuration file that
    defines parameters for the activity table.
--%>
<% ConfigurationHelper.loadConfiguration(application.getRealPath(bundle.relativePackagePath()+"config/activity.json")); %>

<%--
    Language Activities:
	1.  Set the resourceBundle variables that will be used in this package (which are instantiated 
	    in the languageInitialization.jspf fileInstantiate appropriate language resource bundles.)
	    This required that the language configuration has been executed.
	2.  Populate the variable i18nValues for the appropriate resourceBundles (if they have 
	    "javascript.<keyvalue>" entries.  The i18nValues variable was also instantiated in the 
		languageInitialization.jspf file.
--%>
<%  
    // Set real path to the package on the webserver
    String packageRealPath = getServletContext().getRealPath(bundle.relativePackagePath());
    // Set the absolute path to the directory containing the locale property files
    String packageTranslationPath = packageRealPath + File.separator + "resources" + File.separator + "languages";
    // Set package resource bundle
	ResourceBundle packageResourceBundle = ThemeLocalizer.getResourceBundle("Activity", preferredLocale, packageTranslationPath);
    // Set the values used by javascript
    i18nValues = ThemeLocalizer.getJavaScriptValues(packageResourceBundle, i18nValues);
%>